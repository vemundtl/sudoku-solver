{"ast":null,"code":"var _jsxFileName = \"/Users/vemundtlund/Documents/Programmering/sudoku_solver/react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Board from \"./Board.js\";\nimport Alert from \"./Alert\";\nimport Puzzle from \"./puzzles\";\nimport { useState } from \"react\";\nimport puzzles from \"./puzzles\";\nimport generator from \"sudoku\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction generateSudoku() {\n  const raw = generator.makepuzzle();\n  const result = {\n    rows: []\n  };\n\n  for (let i = 0; i < 9; i++) {\n    const row = {\n      cols: [],\n      index: i\n    };\n\n    for (let j = 0; j < 9; j++) {\n      const value = raw[i * 9 * j];\n      const col = {\n        row: i,\n        col: j,\n        value: {\n          value\n        },\n        readOnly: value !== null\n      };\n    }\n  }\n}\n\nfunction App() {\n  _s();\n\n  const [alert, setAlert] = useState(false);\n  const [puzzle, setPuzzle] = useState([]);\n  const [getRandomPuzzle, setRandomPuzzle] = useState([Puzzle[Math.floor(Math.random() * Puzzle.length)]]);\n  const [boardState, setBoardState] = useState([]); // const formatPuzzle = (puzzle) => {\n  //   const formattedPuzzle = [];\n  //   for (let i=0; i < 9; i++) {\n  //     const\n  //     for (let j=0; j < 9; j++){\n  //     }\n  //   }\n  // };\n\n  const onSquareValueChange = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app2\",\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        boardState: boardState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), alert && /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"BPu9vBsmYVCfW+4XqzwR64L1PWM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vemundtlund/Documents/Programmering/sudoku_solver/react/src/App.js"],"names":["Board","Alert","Puzzle","useState","puzzles","generator","generateSudoku","raw","makepuzzle","result","rows","i","row","cols","index","j","value","col","readOnly","App","alert","setAlert","puzzle","setPuzzle","getRandomPuzzle","setRandomPuzzle","Math","floor","random","length","boardState","setBoardState","onSquareValueChange"],"mappings":";;;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,QAAtB;;;AAEA,SAASC,cAAT,GAA0B;AACxB,QAAMC,GAAG,GAAGF,SAAS,CAACG,UAAV,EAAZ;AACA,QAAMC,MAAM,GAAG;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAMC,GAAG,GAAG;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,KAAK,EAAEH;AAAnB,KAAZ;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,KAAK,GAAGT,GAAG,CAACI,CAAC,GAAG,CAAJ,GAAQI,CAAT,CAAjB;AACA,YAAME,GAAG,GAAG;AACVL,QAAAA,GAAG,EAAED,CADK;AAEVM,QAAAA,GAAG,EAAEF,CAFK;AAGVC,QAAAA,KAAK,EAAE;AAAEA,UAAAA;AAAF,SAHG;AAIVE,QAAAA,QAAQ,EAAEF,KAAK,KAAK;AAJV,OAAZ;AAMD;AACF;AACF;;AAED,SAASG,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACqB,eAAD,EAAkBC,eAAlB,IAAqCtB,QAAQ,CAAC,CAClDD,MAAM,CAACwB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB1B,MAAM,CAAC2B,MAAlC,CAAD,CAD4C,CAAD,CAAnD;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,EAAD,CAA5C,CANa,CAQb;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA,QAAM6B,mBAAmB,GAAG,MAAM,CAAE,CAApC;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,UAAU,EAAEF;AAAnB;AAAA;AAAA;AAAA;AAAA,cADF,EAEGV,KAAK,iBAAI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA7BQD,G;;KAAAA,G;AA+BT,eAAeA,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Board from \"./Board.js\";\nimport Alert from \"./Alert\";\nimport Puzzle from \"./puzzles\";\nimport { useState } from \"react\";\nimport puzzles from \"./puzzles\";\nimport generator from \"sudoku\";\n\nfunction generateSudoku() {\n  const raw = generator.makepuzzle();\n  const result = { rows: [] };\n  for (let i = 0; i < 9; i++) {\n    const row = { cols: [], index: i };\n    for (let j = 0; j < 9; j++) {\n      const value = raw[i * 9 * j];\n      const col = {\n        row: i,\n        col: j,\n        value: { value },\n        readOnly: value !== null,\n      };\n    }\n  }\n}\n\nfunction App() {\n  const [alert, setAlert] = useState(false);\n  const [puzzle, setPuzzle] = useState([]);\n  const [getRandomPuzzle, setRandomPuzzle] = useState([\n    Puzzle[Math.floor(Math.random() * Puzzle.length)],\n  ]);\n  const [boardState, setBoardState] = useState([]);\n\n  // const formatPuzzle = (puzzle) => {\n  //   const formattedPuzzle = [];\n  //   for (let i=0; i < 9; i++) {\n  //     const\n  //     for (let j=0; j < 9; j++){\n\n  //     }\n  //   }\n\n  // };\n\n  const onSquareValueChange = () => {};\n\n  return (\n    <div className=\"\">\n      <header className=\"app2\">\n        <Board boardState={boardState} />\n        {alert && <Alert />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}