{"ast":null,"code":"var _jsxFileName = \"/Users/vemundtlund/Documents/Programmering/sudoku_solver/react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Board from \"./Board.js\";\nimport Alert from \"./Alert\";\nimport Puzzle from \"./puzzles\";\nimport { useState } from \"react\";\nimport puzzles from \"./puzzles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst board = [[7, 8, 0, 4, 0, 0, 1, 2, 0], [6, 0, 0, 0, 7, 5, 0, 0, 9], [0, 0, 0, 6, 0, 1, 0, 7, 8], [0, 0, 7, 0, 4, 0, 2, 6, 0], [0, 0, 1, 0, 5, 0, 9, 3, 0], [9, 0, 4, 0, 6, 0, 0, 0, 5], [0, 7, 0, 3, 0, 0, 0, 1, 2], [1, 2, 0, 0, 0, 7, 4, 0, 0], [0, 4, 9, 2, 0, 6, 0, 0, 7]];\n\nfunction App() {\n  _s();\n\n  const [alert, setAlert] = useState(false);\n  const [puzzle, setPuzzle] = useState([]);\n  const [getRandomPuzzle, setRandomPuzzle] = useState([Puzzle[Math.floor(Math.random() * Puzzle.length)]]); // const formatPuzzle = (puzzle) => {\n  //   const formattedPuzzle = [];\n  //   for (let i=0; i < 9; i++) {\n  //     const\n  //     for (let j=0; j < 9; j++){\n  //     }\n  //   }\n  // };\n\n  const onSquareValueChange = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app2\",\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        board: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), alert && /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ogF7ZsCClhrAAW26mX/oCHUS6oo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vemundtlund/Documents/Programmering/sudoku_solver/react/src/App.js"],"names":["Board","Alert","Puzzle","useState","puzzles","board","App","alert","setAlert","puzzle","setPuzzle","getRandomPuzzle","setRandomPuzzle","Math","floor","random","length","onSquareValueChange"],"mappings":";;;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CARY,EASZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CATY,CAAd;;AAYA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,eAAD,EAAkBC,eAAlB,IAAqCT,QAAQ,CAAC,CAClDD,MAAM,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,MAAM,CAACc,MAAlC,CAAD,CAD4C,CAAD,CAAnD,CAHa,CAMb;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA,QAAMC,mBAAmB,GAAG,MAAM,CAAE,CAApC;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEZ;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,EAEGE,KAAK,iBAAI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA3BQD,G;;KAAAA,G;AA6BT,eAAeA,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Board from \"./Board.js\";\nimport Alert from \"./Alert\";\nimport Puzzle from \"./puzzles\";\nimport { useState } from \"react\";\nimport puzzles from \"./puzzles\";\n\nconst board = [\n  [7, 8, 0, 4, 0, 0, 1, 2, 0],\n  [6, 0, 0, 0, 7, 5, 0, 0, 9],\n  [0, 0, 0, 6, 0, 1, 0, 7, 8],\n  [0, 0, 7, 0, 4, 0, 2, 6, 0],\n  [0, 0, 1, 0, 5, 0, 9, 3, 0],\n  [9, 0, 4, 0, 6, 0, 0, 0, 5],\n  [0, 7, 0, 3, 0, 0, 0, 1, 2],\n  [1, 2, 0, 0, 0, 7, 4, 0, 0],\n  [0, 4, 9, 2, 0, 6, 0, 0, 7],\n];\n\nfunction App() {\n  const [alert, setAlert] = useState(false);\n  const [puzzle, setPuzzle] = useState([]);\n  const [getRandomPuzzle, setRandomPuzzle] = useState([\n    Puzzle[Math.floor(Math.random() * Puzzle.length)],\n  ]);\n  // const formatPuzzle = (puzzle) => {\n  //   const formattedPuzzle = [];\n  //   for (let i=0; i < 9; i++) {\n  //     const\n  //     for (let j=0; j < 9; j++){\n\n  //     }\n  //   }\n\n  // };\n\n  const onSquareValueChange = () => {};\n\n  return (\n    <div className=\"\">\n      <header className=\"app2\">\n        <Board board={board} />\n        {alert && <Alert />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}